# syntax=docker/dockerfile:1
# Multi-stage Dockerfile for building all extensions with proper dependency management
# Each extension stage can be reused by dependent extensions

# Base stage - fundamental system packages
FROM ubuntu:22.04 as base
RUN apt-get update && apt-get install -y \
    curl wget unzip build-essential \
    ca-certificates gnupg lsb-release \
    sudo git \
    && rm -rf /var/lib/apt/lists/*

# User stage - creates the user environment (depends on base)
FROM base as user
ARG USERNAME=vscode
ARG USER_UID=1000
ARG USER_GID=1000

# Create the user
RUN groupadd --gid $USER_GID $USERNAME 2>/dev/null || groupmod -n $USERNAME $(getent group $USER_GID | cut -d: -f1) \
    && useradd --uid $USER_UID --gid $USER_GID -m $USERNAME 2>/dev/null || usermod -l $USERNAME -d /home/$USERNAME -m $(getent passwd $USER_UID | cut -d: -f1) \
    #
    # [Optional] Add sudo support. Omit if you don't need to install software after connecting.
    && apt-get update \
    && apt-get install -y sudo \
    && echo $USERNAME ALL=\(root\) NOPASSWD:ALL > /etc/sudoers.d/$USERNAME \
    && chmod 0440 /etc/sudoers.d/$USERNAME

USER $USERNAME
WORKDIR /workspace

# Git stage - git configuration (depends on user)
FROM user as git
RUN git config --global user.name "Dev User" \
    && git config --global user.email "dev@example.com" \
    && git config --global init.defaultBranch main \
    && git config --global core.editor vim

# SSH stage - SSH client setup (depends on user)  
FROM user as ssh
# SSH configuration (openssh-client is already installed via dependency)
# Just ensure SSH is available for git operations

# Node/npm stage - Node.js and npm (depends on user)
FROM user as npm
RUN curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash - \
    && sudo apt-get install -y nodejs \
    && sudo npm install -g npm@latest

# FZF stage - fuzzy finder (depends on user)
FROM user as fzf
RUN git clone --depth 1 https://github.com/junegunn/fzf.git /home/$USERNAME/.fzf \
    && /home/$USERNAME/.fzf/install --all

# UV stage - Python package installer (depends on user)
FROM user as uv
RUN curl -LsSf https://astral.sh/uv/install.sh | sh

# Pixi stage - conda-compatible package manager (depends on user)
FROM user as pixi
RUN curl -fsSL https://pixi.sh/install.sh | bash

# X11 stage - GUI support (depends on user)
FROM user as x11
RUN sudo apt-get update && sudo apt-get install -y \
    xauth x11-apps \
    && sudo rm -rf /var/lib/apt/lists/*

# NVIDIA stage - GPU support (depends on user)
FROM user as nvidia
# NVIDIA GPU support is handled via runtime, no build-time setup needed

# Default stage - combines commonly used extensions
FROM user as default
# This stage intentionally minimal - dependencies handled via composition
